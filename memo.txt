そもそもNode.jsって何？
サーバーまで作れる
サーバとは？
Webアプリケーションの見えている部分（クライアント）
→裏の見えていない部分の仕組み

JavaScriptでかく

◎車の例
クライアントは見た目の部分
サーバはアクセルやブレーキなどの制御する仕組みの部分

Node.jsとは
環境、設計手法

npmインストール後
node -vでバージョン確認できる
→同時にnpmm使えるように
node package manager

◎-gとは
グローバルにインストールしますよというもの。
PC上でどこでもそのパッケージを使えますよというもの。

◎APIって何？
例）レストラン
客（クライアント）　メニューをみて決めて注文（URLを叩く）
ウェイター（API）　厨房へ注文を伝える　客に渡されたものを渡す
厨房（サーバ　データの格納場所）　注文を作ってウェイターに渡す
→Node.jsはサーバに相当するが、その中にAPIの機能を組み込むイメージ（分離しているわけではない）

APIとは、クライアントとサーバをつなげる役割
→Application　Programing　Interface

◎
npm initで初期化すると、pacage.jsonが作成される。
ライブラリはpackage.jsonで管理される
mainで決めたエントリーポイントの名前（今回はindex.js）が一番最初のファイルになる

node ファイル名でファイルを実行できる（javac ファイル名みたいな感じ？）

scriptsの中にdevを書くと、npm run devとコマンドを打つことで、””の内容を走らせることができる
・nodemonとは
ファイルを保存するたびにリロードしてくれるモジュール（読み込みをしてくれる）
→index.jsが動く

・expressとは
公式ドキュメントを見ればわかる

requireはimportと同じ意味

3000や８０００のポートはよく使われるが、バッティングするとコンフリクトする

・postmanの役割
postは投稿する
CRUDを使うことができるソフトウェア
->ブラウザでも使えるが、ローカルサーバの場合は使えない

●mongoDBとは
Json形式でデータ管理（非テーブル）
→ドキュメント指向型
・メリット
1.動的スキーマ設定が可能
データの構造をデータごとに決めることができる（柔軟なテーブル設計）
→テーブル形式だと、初めにがっちりテーブルを設計する必要がある。
2.大容量データでも捌ける
処理速度を保てる（SNSなどのデータでも捌ける）
→テーブル形式でも扱えるが、容量が増えると、処理速度が落ちる
3.SQL文を知らなくても使える
NoSQLと言われている

・デメリット
1.データ検索に弱い
文字列を打ち込んで検索をかける
検索するためのSQL文が存在しないため。
2.データの一貫性が保てない
1つ1つのデータに対してデータ構造を決められるが、管理するためにお金や時間のコストがかかってしまう

・非同期処理とは？
データが帰ってくるのが遅いから、別の作業をする
例：電子レンジ
温めている最中の時間（1〜2分）の間に皿を洗うなど別のことをする

・同期処理とは？
例：電子レンジ
温めている最中の時間（1〜2分）の間に電子レンジの前にじーっとしていること

・なぜ非同期処理が必要？
待っている時間が無駄。効率化のために。

・非同期処理の書き方
リクエスト時
async（hronous）をfunctionの前につける
async function(){レンチン}

レスポンス時
await　おにぎり
レンチンが終わったらおにぎり（データ）を取得する

・実際のアプリケーションでは？
クライアントからサーバへのリクエストとサーバからDBへのリクエストでasync
DBからサーバへのレスポンスとサーバからクライアントへのレスポンスでawait

●TODOアプリの概念図（どの言語でも変わらん）
クライアント
→PCなど
サーバ
→バックエンド（node.js）
DB
→データベース（データの蓄積）

・クライアント→サーバ流れ
axiosでAPIコールする
・サーバ→DBの流れ
node.jsとmongoDBをつなぐ、mongooseというライブラリを使用